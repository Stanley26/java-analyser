/*
 * build.gradle
 * Fichier de build principal qui définit les dépendances et les tâches en utilisant la syntaxe Groovy.
 */

plugins {
    // Plugin pour une application Java standard
    id 'application'
    // Plugin Shadow pour créer un "fat JAR" ou "uber JAR" qui inclut toutes les dépendances.
    // C'est essentiel pour créer un outil en ligne de commande facilement distribuable.
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

// Configuration générale du projet
group = 'com.votre_entreprise'
version = '1.0.0'

// Configuration spécifique à Java
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Configuration de l'application
application {
    // Spécifie la classe principale à exécuter lorsque le JAR est lancé
    mainClassName = 'com.votre_entreprise.analyzer.Main'
}

repositories {
    // Dépôt central de Maven, où la plupart des bibliothèques sont hébergées
    mavenCentral()
}

dependencies {
    // ===== Dépendances Spoon pour l'analyse de code =====
    implementation 'fr.inria.gforge.spoon:spoon-core:11.0.0'

    // Cela résout l'erreur NoClassDefFoundError.
    implementation 'org.slf4j:slf4j-simple:2.0.13'

    // ===== Dépendance pour la lecture des pom.xml =====
    implementation 'org.apache.maven:maven-model:3.9.6'

    // ===== Dépendances pour la sérialisation en JSON =====
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

    // ===== Dépendances pour les tests (Bonne pratique) =====
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

test {
    useJUnitPlatform()
}

// Configuration de la tâche ShadowJar pour créer le fat JAR
shadowJar {
    // Nom de base pour le fichier JAR généré
    archiveBaseName = 'analyzer'
    // Le classificateur pour différencier le fat JAR du JAR normal
    archiveClassifier = ''
    // La version est héritée de la configuration du projet
    archiveVersion = project.version
    // Fusionne les fichiers de service pour éviter les conflits
    mergeServiceFiles()
}

// Fait en sorte que la tâche 'build' dépende de 'shadowJar'
build.dependsOn shadowJar
